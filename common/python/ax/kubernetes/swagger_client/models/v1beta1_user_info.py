# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1beta1UserInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, username=None, uid=None, groups=None, extra=None):
        """
        V1beta1UserInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'username': 'str',
            'uid': 'str',
            'groups': 'list[str]',
            'extra': 'object'
        }

        self.attribute_map = {
            'username': 'username',
            'uid': 'uid',
            'groups': 'groups',
            'extra': 'extra'
        }

        self._username = username
        self._uid = uid
        self._groups = groups
        self._extra = extra

    @property
    def username(self):
        """
        Gets the username of this V1beta1UserInfo.
        The name that uniquely identifies this user among all active users.

        :return: The username of this V1beta1UserInfo.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this V1beta1UserInfo.
        The name that uniquely identifies this user among all active users.

        :param username: The username of this V1beta1UserInfo.
        :type: str
        """

        self._username = username

    @property
    def uid(self):
        """
        Gets the uid of this V1beta1UserInfo.
        A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.

        :return: The uid of this V1beta1UserInfo.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """
        Sets the uid of this V1beta1UserInfo.
        A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.

        :param uid: The uid of this V1beta1UserInfo.
        :type: str
        """

        self._uid = uid

    @property
    def groups(self):
        """
        Gets the groups of this V1beta1UserInfo.
        The names of groups this user is a part of.

        :return: The groups of this V1beta1UserInfo.
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """
        Sets the groups of this V1beta1UserInfo.
        The names of groups this user is a part of.

        :param groups: The groups of this V1beta1UserInfo.
        :type: list[str]
        """

        self._groups = groups

    @property
    def extra(self):
        """
        Gets the extra of this V1beta1UserInfo.
        Any additional information provided by the authenticator.

        :return: The extra of this V1beta1UserInfo.
        :rtype: object
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """
        Sets the extra of this V1beta1UserInfo.
        Any additional information provided by the authenticator.

        :param extra: The extra of this V1beta1UserInfo.
        :type: object
        """

        self._extra = extra

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1beta1UserInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
