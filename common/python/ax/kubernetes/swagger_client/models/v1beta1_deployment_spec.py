# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1beta1DeploymentSpec(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, replicas=None, selector=None, template=None, strategy=None, min_ready_seconds=None, revision_history_limit=None, paused=None, rollback_to=None, progress_deadline_seconds=None):
        """
        V1beta1DeploymentSpec - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'replicas': 'int',
            'selector': 'V1LabelSelector',
            'template': 'V1PodTemplateSpec',
            'strategy': 'V1beta1DeploymentStrategy',
            'min_ready_seconds': 'int',
            'revision_history_limit': 'int',
            'paused': 'bool',
            'rollback_to': 'V1beta1RollbackConfig',
            'progress_deadline_seconds': 'int'
        }

        self.attribute_map = {
            'replicas': 'replicas',
            'selector': 'selector',
            'template': 'template',
            'strategy': 'strategy',
            'min_ready_seconds': 'minReadySeconds',
            'revision_history_limit': 'revisionHistoryLimit',
            'paused': 'paused',
            'rollback_to': 'rollbackTo',
            'progress_deadline_seconds': 'progressDeadlineSeconds'
        }

        self._replicas = replicas
        self._selector = selector
        self._template = template
        self._strategy = strategy
        self._min_ready_seconds = min_ready_seconds
        self._revision_history_limit = revision_history_limit
        self._paused = paused
        self._rollback_to = rollback_to
        self._progress_deadline_seconds = progress_deadline_seconds

    @property
    def replicas(self):
        """
        Gets the replicas of this V1beta1DeploymentSpec.
        Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.

        :return: The replicas of this V1beta1DeploymentSpec.
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """
        Sets the replicas of this V1beta1DeploymentSpec.
        Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.

        :param replicas: The replicas of this V1beta1DeploymentSpec.
        :type: int
        """

        self._replicas = replicas

    @property
    def selector(self):
        """
        Gets the selector of this V1beta1DeploymentSpec.
        Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.

        :return: The selector of this V1beta1DeploymentSpec.
        :rtype: V1LabelSelector
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """
        Sets the selector of this V1beta1DeploymentSpec.
        Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.

        :param selector: The selector of this V1beta1DeploymentSpec.
        :type: V1LabelSelector
        """

        self._selector = selector

    @property
    def template(self):
        """
        Gets the template of this V1beta1DeploymentSpec.
        Template describes the pods that will be created.

        :return: The template of this V1beta1DeploymentSpec.
        :rtype: V1PodTemplateSpec
        """
        return self._template

    @template.setter
    def template(self, template):
        """
        Sets the template of this V1beta1DeploymentSpec.
        Template describes the pods that will be created.

        :param template: The template of this V1beta1DeploymentSpec.
        :type: V1PodTemplateSpec
        """
        if template is None:
            raise ValueError("Invalid value for `template`, must not be `None`")

        self._template = template

    @property
    def strategy(self):
        """
        Gets the strategy of this V1beta1DeploymentSpec.
        The deployment strategy to use to replace existing pods with new ones.

        :return: The strategy of this V1beta1DeploymentSpec.
        :rtype: V1beta1DeploymentStrategy
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """
        Sets the strategy of this V1beta1DeploymentSpec.
        The deployment strategy to use to replace existing pods with new ones.

        :param strategy: The strategy of this V1beta1DeploymentSpec.
        :type: V1beta1DeploymentStrategy
        """

        self._strategy = strategy

    @property
    def min_ready_seconds(self):
        """
        Gets the min_ready_seconds of this V1beta1DeploymentSpec.
        Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)

        :return: The min_ready_seconds of this V1beta1DeploymentSpec.
        :rtype: int
        """
        return self._min_ready_seconds

    @min_ready_seconds.setter
    def min_ready_seconds(self, min_ready_seconds):
        """
        Sets the min_ready_seconds of this V1beta1DeploymentSpec.
        Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)

        :param min_ready_seconds: The min_ready_seconds of this V1beta1DeploymentSpec.
        :type: int
        """

        self._min_ready_seconds = min_ready_seconds

    @property
    def revision_history_limit(self):
        """
        Gets the revision_history_limit of this V1beta1DeploymentSpec.
        The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 2.

        :return: The revision_history_limit of this V1beta1DeploymentSpec.
        :rtype: int
        """
        return self._revision_history_limit

    @revision_history_limit.setter
    def revision_history_limit(self, revision_history_limit):
        """
        Sets the revision_history_limit of this V1beta1DeploymentSpec.
        The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 2.

        :param revision_history_limit: The revision_history_limit of this V1beta1DeploymentSpec.
        :type: int
        """

        self._revision_history_limit = revision_history_limit

    @property
    def paused(self):
        """
        Gets the paused of this V1beta1DeploymentSpec.
        Indicates that the deployment is paused.

        :return: The paused of this V1beta1DeploymentSpec.
        :rtype: bool
        """
        return self._paused

    @paused.setter
    def paused(self, paused):
        """
        Sets the paused of this V1beta1DeploymentSpec.
        Indicates that the deployment is paused.

        :param paused: The paused of this V1beta1DeploymentSpec.
        :type: bool
        """

        self._paused = paused

    @property
    def rollback_to(self):
        """
        Gets the rollback_to of this V1beta1DeploymentSpec.
        The config this deployment is rolling back to. Will be cleared after rollback is done.

        :return: The rollback_to of this V1beta1DeploymentSpec.
        :rtype: V1beta1RollbackConfig
        """
        return self._rollback_to

    @rollback_to.setter
    def rollback_to(self, rollback_to):
        """
        Sets the rollback_to of this V1beta1DeploymentSpec.
        The config this deployment is rolling back to. Will be cleared after rollback is done.

        :param rollback_to: The rollback_to of this V1beta1DeploymentSpec.
        :type: V1beta1RollbackConfig
        """

        self._rollback_to = rollback_to

    @property
    def progress_deadline_seconds(self):
        """
        Gets the progress_deadline_seconds of this V1beta1DeploymentSpec.
        The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Once autoRollback is implemented, the deployment controller will automatically rollback failed deployments. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.

        :return: The progress_deadline_seconds of this V1beta1DeploymentSpec.
        :rtype: int
        """
        return self._progress_deadline_seconds

    @progress_deadline_seconds.setter
    def progress_deadline_seconds(self, progress_deadline_seconds):
        """
        Sets the progress_deadline_seconds of this V1beta1DeploymentSpec.
        The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Once autoRollback is implemented, the deployment controller will automatically rollback failed deployments. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.

        :param progress_deadline_seconds: The progress_deadline_seconds of this V1beta1DeploymentSpec.
        :type: int
        """

        self._progress_deadline_seconds = progress_deadline_seconds

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1beta1DeploymentSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
