package artifact

import (
	"applatix.io/axdb"
	"applatix.io/axerror"
	"applatix.io/axops/schema_platform"
	"applatix.io/axops/utils"
	"encoding/json"
	"fmt"
)

const (
	// retention-tag
	RetentionExported = "exported"
	RetentionInternal = "internal"
	RetentionAXLog    = "ax-log"
	RetentionUserLog  = "user-log"

	// metadata
	OriginalNums         = "original-nums"
	CurrentNums          = "current-nums"
	TotalSize            = "total-size"
	TotalStoredSize      = "total-stored-size"
	AXLogSize            = RetentionAXLog + "-size"
	AXLogStoredSize      = RetentionAXLog + "-stored-size"
	AXLogOriginalNums    = RetentionAXLog + "-original-nums"
	AXLogCurrentNums     = RetentionAXLog + "-current-nums"
	UserLogSize          = RetentionUserLog + "-size"
	UserLogStoredSize    = RetentionUserLog + "-stored-size"
	UserLogOriginalNums  = RetentionUserLog + "-original-nums"
	UserLogCurrentNums   = RetentionUserLog + "-current-nums"
	ExportedSize         = RetentionExported + "-size"
	ExportedStoredSize   = RetentionExported + "-stored-size"
	ExportedOriginalNums = RetentionExported + "-original-nums"
	ExportedCurrentNums  = RetentionExported + "-current-nums"
	InternalSize         = RetentionInternal + "-size"
	InternalStoredSize   = RetentionInternal + "-stored-size"
	InternalOriginalNums = RetentionInternal + "-original-nums"
	InternalCurrentNums  = RetentionInternal + "-current-nums"

	ArtifactNums = "artifact_nums"
	ArtifactSize = "artifact_size"
	ArtifactTags = "artifact_tags"
)

func PopulateDefaultArtifactMetaData() *axerror.AXError {
	artifactNums := map[string]interface{}{
		OriginalNums:         0,
		CurrentNums:          0,
		AXLogOriginalNums:    0,
		AXLogCurrentNums:     0,
		UserLogOriginalNums:  0,
		UserLogCurrentNums:   0,
		ExportedOriginalNums: 0,
		ExportedCurrentNums:  0,
		InternalOriginalNums: 0,
		InternalCurrentNums:  0,
	}
	artifactSize := map[string]interface{}{
		TotalSize:          0,
		TotalStoredSize:    0,
		AXLogSize:          0,
		AXLogStoredSize:    0,
		UserLogSize:        0,
		UserLogStoredSize:  0,
		ExportedSize:       0,
		ExportedStoredSize: 0,
		InternalSize:       0,
		InternalStoredSize: 0,
	}
	artifactTags := []string{}

	dataMap := map[string]interface{}{
		ArtifactNums: artifactNums,
		ArtifactSize: artifactSize,
		ArtifactTags: artifactTags,
	}

	for key, value := range dataMap {
		//first check if the key is in table already
		params := map[string]interface{}{
			schema_platform.ArtifactMetaAttribute: key,
		}

		var resultArray []map[string]interface{}
		retryCount := 0
		for {
			retryCount++
			err := utils.Dbcl.Get(axdb.AXDBAppAXSYS, schema_platform.ArtifactMetaTable, params, &resultArray)
			if err != nil {
				if retryCount < 100 {
					continue
				} else {
					break
				}
			} else {
				break
			}
		}
		if len(resultArray) != 0 {
			continue
		}

		valueBytes, err := json.Marshal(value)
		if err != nil {
			return axerror.ERR_AX_INTERNAL.NewWithMessage(fmt.Sprintf("Failed to marshal the artifact object: %v", err))
		}

		payload := map[string]string{
			schema_platform.ArtifactMetaAttribute: key,
			schema_platform.ArtifactMetaValue:     string(valueBytes),
		}
		retryCount = 0
		for {
			retryCount++
			_, err := utils.Dbcl.Post(axdb.AXDBAppAXSYS, schema_platform.ArtifactMetaTable, payload)
			if err != nil {
				if retryCount < 100 {
					continue
				} else {
					utils.ErrorLog.Printf(fmt.Sprintf("failed to populate artifact meta table: %v", payload))
					return err
				}
			} else {
				break
			}
		}
	}

	utils.InfoLog.Printf("Loaded the default value for artifact meta table.")

	return nil
}

func PopulateDefaultRetentionPolicy() *axerror.AXError {
	axlogPolicy := map[string]interface{}{
		schema_platform.RetentionName:        RetentionAXLog,
		schema_platform.RetentionPolicy:      2628000000,
		schema_platform.RetentionDescription: "For logs generated by Argo services.",
	}

	userlogPolicy := map[string]interface{}{
		schema_platform.RetentionName:        RetentionUserLog,
		schema_platform.RetentionPolicy:      2628000000,
		schema_platform.RetentionDescription: "For logs generated by your containers.",
	}

	longretentionPolicy := map[string]interface{}{
		schema_platform.RetentionName:        RetentionExported,
		schema_platform.RetentionPolicy:      15768000000,
		schema_platform.RetentionDescription: "For artifacts that have been exported to the root level of the workflow.",
	}

	normalPolicy := map[string]interface{}{
		schema_platform.RetentionName:        RetentionInternal,
		schema_platform.RetentionPolicy:      604800000,
		schema_platform.RetentionDescription: "For artifacts that are generated from workflow but have not been set as exported.",
	}

	policies := []map[string]interface{}{axlogPolicy, userlogPolicy, longretentionPolicy, normalPolicy}
	for _, policy := range policies {
		params := map[string]interface{}{
			schema_platform.RetentionName: policy[schema_platform.RetentionName],
		}

		var resultArray []map[string]interface{}
		retryCount := 0
		for {
			retryCount++
			err := utils.Dbcl.Get(axdb.AXDBAppAXSYS, schema_platform.RetentionTable, params, &resultArray)
			if err != nil {
				if retryCount < 100 {
					continue
				} else {
					break
				}
			} else {
				break
			}
		}
		if len(resultArray) != 0 {
			continue
		}

		retryCount = 0
		for {
			retryCount++
			_, err := utils.Dbcl.Post(axdb.AXDBAppAXSYS, schema_platform.RetentionTable, policy)
			if err != nil {
				if retryCount < 100 {
					continue
				} else {
					utils.ErrorLog.Printf(fmt.Sprintf("failed to populate default artifact retention policy: %v", policy))
					return err
				}
			} else {
				break
			}
		}

	}

	utils.InfoLog.Printf("Loaded the default artifact retention policy.")

	return nil
}
