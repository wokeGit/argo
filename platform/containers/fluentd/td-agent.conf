# AX fluentd configurations.

# Example:
# {"log":"[info:2016-02-16T16:04:05.930-08:00] Some log text here\n","stream":"stdout","time":"2016-02-17T00:04:05.931087621Z"}
<source>
  type tail
  path /var/log/containers/*.log
  exclude_path ["/var/log/containers/fluentd*.log"]
  pos_file /var/log/es-containers.log.pos
  time_format %Y-%m-%dT%H:%M:%S.%NZ
  keep_time_key true
  tag container.*
  format json
  read_from_head true
</source>

# AX: Need to take all host syslog
<source>
  type tail
  format syslog
  path /var/log/syslog
  pos_file /var/log/es-syslog.pos
  tag syslog
</source>

# Example:
# 2016/02/04 06:52:38 filePurge: successfully removed file /var/etcd/data/member/wal/00000000000006d0-00000000010a23d1.wal
<source>
  type tail
  # Not parsing this, because it doesn't have anything particularly useful to
  # parse out of it (like severities).
  format none
  path /var/log/etcd*.log
  pos_file /var/log/es-etcd.log.pos
  tag etcd
</source>

# Multi-line parsing is required for all the kube logs because very large log
# statements, such as those that include entire object bodies, get split into
# multiple lines by glog.

# Example:
# I0204 07:00:19.604280       5 handlers.go:131] GET /api/v1/nodes: (1.624207ms) 200 [[kube-controller-manager/v1.1.3 (linux/amd64) kubernetes/6a81b50] 127.0.0.1:38266]
<source>
  type tail
  format multiline
  format_firstline /^\w\d{4}/
  format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
  time_format %m%d %H:%M:%S.%N
  path /var/log/kube-apiserver.log
  pos_file /var/log/es-kube-apiserver.log.pos
  tag kube-apiserver
</source>

<filter kube-apiserver.**>
  @type grep
  regexp1 severity W|E|F
</filter>

# Example:
# I0204 06:55:31.872680       5 servicecontroller.go:277] LB already exists and doesn't need update for service kube-system/kube-ui
<source>
  type tail
  format multiline
  format_firstline /^\w\d{4}/
  format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
  time_format %m%d %H:%M:%S.%N
  path /var/log/kube-controller-manager.log
  pos_file /var/log/es-kube-controller-manager.log.pos
  tag kube-controller-manager
</source>

# Example:
# W0204 06:49:18.239674       7 reflector.go:245] pkg/scheduler/factory/factory.go:193: watch of *api.Service ended with: 401: The event in requested index is outdated and cleared (the requested history has been cleared [2578313/2577886]) [2579312]
<source>
  type tail
  format multiline
  format_firstline /^\w\d{4}/
  format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
  time_format %m%d %H:%M:%S.%N
  path /var/log/kube-scheduler.log
  pos_file /var/log/es-kube-scheduler.log.pos
  tag kube-scheduler
</source>

# Pass all container logs to kubernetes metadata plugin.
<filter container.**>
  type kubernetes_metadata
</filter>

# AX: NB. This seems unnatural but works.
# AX: Kubernetes metadata processes namespace into ruby hash.
# AX: Ideally basic hash reference should get namespace info out. But it didn't work for some reason.
# AX: Auto_typecast might help but this flag causes elasticsearch plugin to crash.
# AX: Had to use this regex replacement. It may have performance impact.
<filter container.**>
  type record_transformer
  enable_ruby true
  #auto_typecast true
  <record>
    namespace ${kubernetes.to_json.gsub(/.*"namespace_name":"/, "").gsub(/".*$/, "")}
  </record>
</filter>

# AX: Rewrite tag to have namespace at beginning. Reference to nested ruby hash didn't work.
<match container.**>
  type rewrite_tag_filter
  rewriterule1 namespace ^(\S+)$ $1.${tag}
</match>

# AX: Send all logs except axuser logs to S3 bucket.
# AX: There should be a better way than copying the following section many times.

# AX: Drop axuser logs.
<match axuser.**>
   type null
</match>

# For each log tag, we use similar directory structure as artifacts. This allows reusing same tool for processing.
# Timestamp is put at beginning for easy retiring.
# Since file buffering is used, we don't need big queue. This means disk usage for buffering is at 1GiB in worst case.
<match axsys.**>
   type s3
   s3_bucket $(ARGO_LOG_BUCKET_NAME)
   auto_create_bucket false
   s3_region us-west-2
   acl bucket-owner-full-control
   path $(ARGO_CLUSTER_NAME)/$(ARGO_CLUSTER_ID)/ax-logs/
   buffer_path /var/log/fluent/s3/axsys
   time_slice_format %Y/%m/%d/axsys/$(ARGO_NODE_NAME)/%H
   s3_object_key_format %{path}%{time_slice}_%{index}.%{file_extension}
   utc
   retry_limit 10
   log_level info

   buffer_queue_limit 2
   buffer_chunk_limit 128m
</match>

<match kube-system.**>
   type s3
   s3_bucket $(ARGO_LOG_BUCKET_NAME)
   auto_create_bucket false
   s3_region us-west-2
   acl bucket-owner-full-control
   path $(ARGO_CLUSTER_NAME)/$(ARGO_CLUSTER_ID)/ax-logs/
   buffer_path /var/log/fluent/s3/kube-system
   time_slice_format %Y/%m/%d/kube-system/$(ARGO_NODE_NAME)/%H
   s3_object_key_format %{path}%{time_slice}_%{index}.%{file_extension}
   utc
   retry_limit 10
   log_level info

   buffer_queue_limit 2
   buffer_chunk_limit 128m
</match>

<match {kube-controller-manager,kube-scheduler,kube-apiserver,etcd}.**>
   type s3
   s3_bucket $(ARGO_LOG_BUCKET_NAME)
   auto_create_bucket false
   s3_region us-west-2
   acl bucket-owner-full-control
   path $(ARGO_CLUSTER_NAME)/$(ARGO_CLUSTER_ID)/ax-logs/
   buffer_path /var/log/fluent/s3/kube-master
   time_slice_format %Y/%m/%d/kube-master/$(ARGO_NODE_NAME)/%H
   s3_object_key_format %{path}%{time_slice}_%{index}.%{file_extension}
   utc
   retry_limit 10
   log_level info

   buffer_queue_limit 2
   buffer_chunk_limit 128m
</match>

<match **>
   type s3
   s3_bucket $(ARGO_LOG_BUCKET_NAME)
   auto_create_bucket false
   s3_region us-west-2
   acl bucket-owner-full-control
   path $(ARGO_CLUSTER_NAME)/$(ARGO_CLUSTER_ID)/ax-logs/
   buffer_path /var/log/fluent/s3/hosts
   time_slice_format %Y/%m/%d/hosts/$(ARGO_NODE_NAME)/%H
   s3_object_key_format %{path}%{time_slice}_%{index}.%{file_extension}
   utc
   retry_limit 10
   log_level info

   buffer_queue_limit 2
   buffer_chunk_limit 128m
</match>
